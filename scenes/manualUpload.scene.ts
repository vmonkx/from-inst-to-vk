import { Context, Markup, Scenes } from "telegraf";
import { MyContext } from "..";
import {
  apiInstagramPosts,
  MediaTypeInstEnum,
  StoriesFileInterface,
} from "../services/instagram";
import { manualUploadKeyboard } from "../keyboards/manulUpload.keyb";
import { uploadMediaToVK } from "../services/uploadToVk";

// manualUploadScene scene
export const manualUploadScene = new Scenes.BaseScene<MyContext>(
  "manualUpload"
);
manualUploadScene.enter(async (ctx) => {
  ctx.reply("–ù–∞—á–∏–Ω–∞—é –∏—Å–∫–∞—Ç—å üîé \n–û–∂–∏–¥–∞–π—Ç–µ...", manualUploadKeyboard);

  try {
    const stories = (await Promise.all(await apiInstagramPosts())) as [
      StoriesFileInterface
    ];

    

    if (stories.length > 0) {
      ctx.scene.session.stories ??= stories;

      ctx.reply("–í–æ—Ç —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏: ü§î");
      stories.forEach(async (story: StoriesFileInterface) => {
        return await ctx.replyWithPhoto(
          {
            url:
              story.media_type === MediaTypeInstEnum.Image
                ? story.media_url
                : story.thumbnail_url,
          },
          {
            caption: `–î–∞—Ç–∞: ${new Date(
              story.timestamp
            ).toLocaleDateString()} ${new Date(
              story.timestamp
            ).toLocaleTimeString()}
                  \n–û–ø–∏—Å–∞–Ω–∏–µ:  ${story.caption},\nC—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–∏—Å:  ${
              story.permalink
            }`,
            ...Markup.inlineKeyboard([
              story.media_url
                ? Markup.button.callback(
                    "–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ –≤–∫ üì§",
                    `upload_vk@${story.id}`
                  )
                : Markup.button.callback(
                    "–î–∞–Ω–Ω—ã–π —Å—Ç–æ—Ä–∏—Å –Ω–µ–ª—å–∑—è –∑–∞–≥—Ä—É–∑–∏—Ç—å üö´",
                    "cannot_upload"
                  ),
            ]),
          }
        );
      });
    } else {
      ctx.reply(
        "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º –æ—Ç—Å—É—Ç–≤—É—é—Ç —Å—Ç–æ—Ä–∏—Å—ã üòî"
      );
    }
  } catch (error) {
    ctx.reply(
      `‚õîÔ∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: \n${error}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÑ /start`
    );
  }
});

manualUploadScene.action(/(upload_vk@)([\w-]{2,50})$/, async (ctx) => {
  const story = ctx.scene.session.stories?.find(
    (story) => story.id === ctx.match[2]
  );

  
  try {
    const res = await uploadMediaToVK(story.media_url, story.media_type);
    if (res.count > 0) {
      ctx.deleteMessage();

      return ctx.reply(`‚úÖ –°—Ç–æ—Ä–∏—Å ${story.caption} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –≤–∫ üòé`);
    }
  } catch (error) {
    ctx.reply(
      `‚õîÔ∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: \n${error}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÑ /start`
    );
  }

  return;
});

manualUploadScene.hears("–í–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ", async (ctx) => {
  return ctx.reply(
    "–ü—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏, –ø–æ–∏—Å–∫ —Å—Ç–æ—Ä–∏—Å–æ–≤ –ø—Ä–∏–¥–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å. \n–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?ü§î",
    Markup.inlineKeyboard([
      Markup.button.callback("–Ø –ø–æ–Ω–∏–º–∞—é", `exit_scene`),
      Markup.button.callback("–ù–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º", "cancel_exit"),
    ])
  );
});

manualUploadScene.action("exit_scene", (ctx) => ctx.scene.enter("start"));
manualUploadScene.action("cancel_exit", (ctx) => ctx.reply("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º üòé"));

manualUploadScene.action("cannot_upload", (ctx) =>
  ctx.reply(
    "–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Å—Ç–æ—Ä–∏—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä—Å–∫–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏, –∏–ª–∏ –±—ã–ª –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–∞—Ä—É—à–∞—é—â–∏–π –∞–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞. –¢–∞–∫–∏–µ —Å—Ç–æ—Ä–∏—Å facebook –Ω–µ –¥–∞–µ—Ç –≤—ã–≥—Ä—É–∂–∞—Ç—å üòê"
  )
);

manualUploadScene.use((ctx) =>
  ctx.replyWithMarkdown(
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ—ë –∏–ª–∏ \n–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ üîÑ /start"
  )
);
