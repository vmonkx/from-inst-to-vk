import { Scenes } from "telegraf";
import { MyContext } from "..";
import { apiInstagramPosts, StoriesFileInterface } from "../services/instagram";
import { uploadMediaToVK } from "../services/uploadToVk";

export const autoUploadScene = new Scenes.BaseScene<MyContext>("autoUpload");

autoUploadScene.enter(async (ctx) => {
  try {
    const stories = (await Promise.all(await apiInstagramPosts())) as [
      StoriesFileInterface
    ];

    if (stories.length > 0) {
      await ctx.reply("–ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∂–∞—Ç—å üì§ \n–û–∂–∏–¥–∞–π—Ç–µ...");
      const resUploads = await Promise.all(
        stories.map((story: StoriesFileInterface) => {
          if (story.media_url) {
            const res = uploadMediaToVK(story.media_url, story.media_type);
            return res;
          }
        })
      );
      await ctx.reply(
        `‚úÖ –°—Ç–æ—Ä–∏—Å –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ ${resUploads.length} —à—Ç. —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –≤–∫ üéâ`
      );
    }
  } catch (error) {
    ctx.reply(
      `‚õîÔ∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: \n${error}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÑ /start`
    );
  }

  return ctx.reply(`–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÑ /start`);
});
